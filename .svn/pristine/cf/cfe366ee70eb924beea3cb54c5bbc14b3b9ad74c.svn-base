package indi.yiju.hamr.examples.examples.maxtemprature;
import java.lang.reflect.Field;
import java.util.Map;

import org.apache.hadoop.mapreduce.Reducer.Context;

import hamr.core.general.annotations.ReduceField;
import hamr.core.general.annotations.TargetField;
import hamr.core.general.bean.AnnotedBean;
import hamr.core.general.counter.Counter;
public class MaxTempratureCounter extends Counter{
	private Double MaxTemprature;
	@SuppressWarnings("rawtypes")
	public MaxTempratureCounter(Context context) {
		super(context);
		MaxTemprature = 0.0;
	}
	
	@Override
	public void count(AnnotedBean key) {
         Map<Field , ReduceField> allReduceField = key.getReduceField();
         Field tempratureField = allReduceField.keySet().iterator().next();
         try {
			Double temprature = tempratureField.getDouble(key);
			if(temprature > MaxTemprature)
			{
				MaxTemprature = temprature;
			}
		} catch (IllegalArgumentException e) {
			e.printStackTrace();
		} catch (IllegalAccessException e) {
			e.printStackTrace();
		}
	}
	
	@Override
	public boolean end(AnnotedBean ret)
	{
		try {
			Map<Field , TargetField> allTargetField = getTargetFields(ret);
			allTargetField.keySet().iterator().next().set(ret, MaxTemprature);
		} catch (IllegalArgumentException e) {
			e.printStackTrace();
		} catch (IllegalAccessException e) {
			e.printStackTrace();
		}
		return true;
	}
}
